
 Bases du MarkDown :
Le Markdown est un langage de balisage léger qui vous permet d'écrire en utilisant un format de texte facile à lire et à écrire. Voici quelques bases :

Titres : Vous pouvez créer un titre en utilisant le symbole #. Plus il y a de symboles #, plus le titre est petit. Par exemple :
Listes : Vous pouvez créer des listes à puces en utilisant le symbole - ou *, et des listes numérotées en utilisant 1., 2., etc. Par exemple :
Liens : Vous pouvez créer un lien en utilisant la syntaxe [texte du lien](URL). Par exemple :
Images : Vous pouvez insérer une image en utilisant la syntaxe ![texte alternatif](URL). Par exemple :
Code : Vous pouvez insérer du code en utilisant les backticks. Utilisez un seul backtick pour du code inline code et trois pour un bloc de code :
bloc de code

Gras et italique : Vous pouvez mettre du texte en gras en utilisant deux astérisques ou deux underscores **gras** ou __gras__, et en italique en utilisant un 
astérisque ou un underscore *italique* ou _italique_.

Les balises <style> ne sont généralement pas supportées dans le Markdown pour des raisons de sécurité. Cependant, vous pouvez utiliser certaines balises HTML 
de base dans le Markdown, comme <b> pour le texte en gras, <i> pour le texte en italique, et <img> pour insérer des images. Pour le style spécifique, comme le 
changement de couleur du texte ou l'ajout de bordures, vous devrez utiliser un autre moyen, comme un fichier CSS séparé, si vous travaillez sur une page web.

En Markdown pur, il n'y a pas de syntaxe intégrée pour redimensionner les images. Cependant, comme Markdown supporte l'HTML brut, vous pouvez utiliser la balise
 <img> pour insérer une image et définir sa taille. Voici comment :
```HTML
<img src="url_de_votre_image" width="100" height="100">
```
Dans cet exemple, url_de_votre_image est l'URL de l'image que vous voulez insérer, et width="100" et height="100" définissent la largeur et la hauteur de 
l'image en pixels. Vous pouvez ajuster ces valeurs en fonction de vos besoins.

Pour formater du texte brut en Markdown, vous pouvez utiliser les symboles suivants :

# pour les titres. Plus il y a de symboles #, plus le titre est petit. Par exemple, # Titre 1, ## Titre 2, ### Titre 3, etc.
- ou * pour les listes à puces. Par exemple, - élément de la liste ou * élément de la liste.
1., 2., etc. pour les listes numérotées. Par exemple, 1. Premier élément, 2. Deuxième élément, etc.
[texte du lien](URL) pour créer un lien. Par exemple, [Google](https://www.google.com).
![texte alternatif](URL) pour insérer une image. Par exemple, ![Logo Google](https://www.google.com/images/logo.png).
Utilisez un seul backtick (`) pour du code inline et trois backticks (```) pour un bloc de code.
**gras** ou __gras__ pour mettre du texte en gras.
*italique* ou _italique_ pour mettre du texte en italique.
Voici comment vous pouvez formater votre texte brut en Markdown :

Notez que les balises <style> ne sont pas supportées en Markdown pour des raisons de

 sécurité. Vous pouvez utiliser certaines balises HTML de base dans le Markdown, comme <b> pour le texte en gras, <i> pour le texte en italique, et <img> 
 pour insérer des images. Pour le style spécifique, comme le changement de couleur du

# Bases du MarkDown

Le Markdown est un langage de balisage léger qui vous permet d'écrire en utilisant un format de texte facile à lire et à écrire. Voici quelques bases :

## Titres

Vous pouvez créer un titre en utilisant le symbole `#`. Plus il y a de symboles `#`, plus le titre est petit.

## Listes

Vous pouvez créer des listes à puces en utilisant le symbole `-` ou `*`, et des listes numérotées en utilisant `1.`, `2.`, etc.

## Liens

Vous pouvez créer un lien en utilisant la syntaxe `[texte du lien](URL)`.

## Images

Vous pouvez insérer une image en utilisant la syntaxe `![texte alternatif](URL)`.

## Code

Vous pouvez insérer du code en utilisant les backticks. Utilisez un seul backtick pour du code inline et trois pour un bloc de code.

## Gras et italique

Vous pouvez mettre du texte en gras en utilisant deux astérisques ou deux underscores `**gras**` ou `__gras__`, et en italique en utilisant un astérisque ou 
un underscore `*italique*` ou `_italique_`.


JAVASCRIPT :

    Méthodes : En programmation, une méthode est une fonction associée à un objet. Dans le contexte d'un objet, une fonction est appelée une méthode. 
        Par exemple, si vous avez un objet personne avec une méthode direBonjour, vous pouvez l'appeler comme ceci : personne.direBonjour().

    Promesses : En JavaScript, une Promesse est un objet qui représente l'achèvement ou l'échec éventuel d'une opération asynchrone. Une promesse est dans l'un 
        des trois états : en attente (pending), résolue (fulfilled), ou rejetée (rejected). Les promesses sont souvent utilisées pour gérer des opérations asynchrones 
        comme les requêtes HTTP.

    Fonctions anonymes : Une fonction anonyme est une fonction sans nom. En JavaScript, les fonctions anonymes sont souvent utilisées comme arguments d'autres fonctions 
        ou comme méthodes d'objets. Par exemple, function() { console.log('Bonjour'); } est une fonction anonyme.

    Fonctions : Une fonction est un bloc de code conçu pour effectuer une tâche particulière. Une fonction est exécutée lorsque quelque chose l'invoque (l'appelle). 
        En JavaScript, une fonction est définie avec le mot-clé function, suivi d'un nom, suivi de parenthèses ().

    Objets : En JavaScript, un objet est une entité autonome avec des propriétés et des types. C'est comme une boîte qui contient des valeurs liées à une chose. 
        Par exemple, un objet personne peut avoir des propriétés comme nom, age, taille, etc. avec des méthodes comme marcher(), parler(), etc.